// Generated by CoffeeScript 1.7.1
var Model, MongoModel, sanitizer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Model = require('./model').Model;

sanitizer = require('sanitizer');

MongoModel = (function(_super) {
  __extends(MongoModel, _super);

  function MongoModel(_mongooseSchemaDescription) {
    var finalModelName, schema, schemaFields;
    this._mongooseSchemaDescription = _mongooseSchemaDescription;
    this._mongoose = null;
    this._mongooseModel = null;
    this._mongooseDoc = null;
    this._mongoose = require('../db').Db.getMongoose();
    if (this._mongooseSchemaDescription != null) {
      this._mongooseSchemaDescription['created_at'] = Date;
      this._mongooseSchemaDescription['updated_at'] = Date;
      finalModelName = getObjectClass(this);
      schema = new this._mongoose.Schema(this._mongooseSchemaDescription);
      this._mongooseModel = this._mongoose.model(finalModelName, schema);
      schemaFields = _.keys(this._mongooseSchemaDescription);
      this._allowedFields = schemaFields;
      if (this._hiddenFields != null) {
        this._allowedFields = _.difference(schemaFields, this._hiddenFields);
        this._allowedFields = this._allowedFields.join(' ');
      }
    }
  }

  MongoModel.prototype.createMongooseDocument = function(data) {
    var schematizedData;
    schematizedData = this._schematizeInputData(data);
    schematizedData['created_at'] = new Date();
    schematizedData['updated_at'] = new Date();
    return new this._mongooseModel(schematizedData);
  };

  MongoModel.prototype.getMongooseModel = function() {
    return this._mongooseModel;
  };

  MongoModel.prototype.getMongoose = function() {
    return this._mongoose;
  };

  MongoModel.prototype.disconnect = function() {
    var _ref;
    return (_ref = this._mongoose) != null ? _ref.connection.close() : void 0;
  };

  MongoModel.prototype.getById = function(id, onComplete) {
    return this.getMongooseModel().findOne({
      '_id': id
    }).exec(onComplete);
  };

  MongoModel.prototype._schematizeInputData = function(inputData) {
    var key, schematizedData, value, _ref;
    schematizedData = {};
    if (typeof this._mongooseSchemaDescription === 'object') {
      _ref = this._mongooseSchemaDescription;
      for (key in _ref) {
        value = _ref[key];
        schematizedData[key] = sanitizer.sanitize(inputData[key]);
      }
    }
    return schematizedData;
  };

  return MongoModel;

})(Model);

exports.MongoModel = MongoModel;
