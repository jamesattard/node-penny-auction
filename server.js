// Generated by CoffeeScript 1.7.1

/*
Module dependencies.
 */
var CoreController, RrsCore, app, connect, cookie, e, engine, express, http, initializers, io, path, routes, srv, _ref;

_ref = require('./core'), CoreController = _ref.CoreController, RrsCore = _ref.RrsCore;

global.RrsCore = RrsCore;

express = require("express");

http = require("http");

path = require("path");

app = express();

engine = require('ejs-locals');

global.configs = require('./application/configs')(app);

CoreController.setStatic('app', app);

CoreController.setStatic('appRoot', __dirname);

console.log("ENV: ", app.get("env"));

initializers = require('./application/initializers')(app);

app.set("port", process.env.PORT || configs.config.appPort);

app.set("views", path.join(__dirname, "application/views"));

app.engine('ejs', engine);

app.set("view engine", "ejs");

app.use(express.favicon());

app.use(express.logger("dev"));

app.use(express.bodyParser());

app.use(express.methodOverride());

app.use(express.cookieParser("your secret here"));

app.use(express.cookieSession({
  secret: 'cssa21csacs-*562312scas+-csa32ca2c3sa',
  key: 'express.sid',
  cookie: {
    maxAge: 12 * 1000 * 60 * 60 * 10
  }
}));

app.use(app.router);

app.use(express["static"](path.join(__dirname, "public")));

if ("development" === app.get("env")) {
  app.use(express.errorHandler());
}

srv = http.createServer(app);

io = require('socket.io').listen(srv);

cookie = require("cookie");

connect = require("connect");

io.set("authorization", function(handshakeData, accept) {
  var sessionJsonCookie;
  if (handshakeData.headers.cookie) {
    handshakeData.cookie = cookie.parse(handshakeData.headers.cookie);
    sessionJsonCookie = connect.utils.parseSignedCookie(handshakeData.cookie["express.sid"], 'cssa21csacs-*562312scas+-csa32ca2c3sa');
    handshakeData.session = connect.utils.parseJSONCookie(sessionJsonCookie);
    if (handshakeData.cookie["express.sid"] === sessionJsonCookie) {
      return accept("Cookie is invalid.", false);
    }
  } else {
    return accept("No cookie transmitted.", false);
  }
  accept(null, true);
});

CoreController.setStatic('srv', srv);

srv.listen(app.get("port"), function() {
  return console.log("Express server listening on port " + app.get("port"));
});

routes = require("./application/routes.js")(app);

require("./application/listeners")(io);

try {

} catch (_error) {
  e = _error;
  if (typeof e === 'ExceptionUserMessage') {
    Helper.json.setSuccess(false);
    Helper.json.addMessage(e.getName(), e.getMessage());
  } else {
    console.log(e);
  }
}
