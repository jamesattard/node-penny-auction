// Generated by CoffeeScript 1.7.1
var User,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

User = (function(_super) {
  var _schemaDescription;

  __extends(User, _super);

  _schemaDescription = {
    firstName: String,
    lastName: String,
    email: String,
    password: String,
    provider: String,
    socialData: {},
    linkCategories: [
      {
        name: String
      }
    ],
    languageId: String
  };

  function User() {
    this._hiddenFields = ['socialData', 'password'];
    User.__super__.constructor.call(this, _schemaDescription);
  }

  User.prototype.save = function(inUserData, onComplete) {
    if (inUserData.email != null) {
      return this.isEmailExist(inUserData.email, (function(_this) {
        return function(isExist) {
          var exception;
          if (!isExist) {
            return _this._saveUser(inUserData, onComplete);
          } else {
            exception = new ExceptionUserMessage("error", "User with such email already exist");
            return onComplete(true, exception);
          }
        };
      })(this));
    }
  };

  User.prototype.findByEmailOrCreate = function(inUserData, onComplete) {
    return this.isEmailExist(inUserData.email, (function(_this) {
      return function(isExist) {
        if (isExist) {
          return _this.getByEmail(inUserData.email, onComplete);
        } else {
          return _this._saveUser(inUserData, function(err, exception) {
            if (!err) {
              return _this.getByEmail(inUserData.email, onComplete);
            } else {
              return onComplete(true, exception);
            }
          });
        }
      };
    })(this));
  };

  User.prototype.isEmailExist = function(inEmail, onComplete) {
    return this.getMongooseModel().findOne({
      'email': inEmail
    }).exec(function(err, result) {
      var isExist;
      isExist = result !== null;
      return onComplete(isExist);
    });
  };

  User.prototype.login = function(inEmail, inPassword, onComplete) {
    var crypto, password;
    crypto = require('crypto');
    password = crypto.createHash('md5').update(inPassword).digest("hex");
    return this.getMongooseModel().findOne({
      'email': inEmail,
      'password': password
    }, this._allowedFields).exec(function(err, result) {
      return onComplete(result);
    });
  };

  User.prototype.getByEmail = function(inEmail, onComplete) {
    return this.getMongooseModel().findOne({
      'email': inEmail
    }, this._allowedFields).exec(function(err, user) {
      var exception;
      if (!err) {
        return onComplete(err, user);
      } else {
        exception = new ExceptionUserMessage("error", "Unable to find user with email (" + inEmail + ")");
        return onComplete(err, exception);
      }
    });
  };

  User.prototype.saveCategory = function(userId, categoryData, onComplete) {
    return this.isCategoryExist(userId, categoryData.name, (function(_this) {
      return function(err, isExist) {
        var category, conditions, options, update;
        if (!isExist) {
          options = {};
          if (parseInt(categoryData.index) === -1) {
            conditions = {
              "_id": userId
            };
            category = {
              name: categoryData.name
            };
            update = {
              $addToSet: {
                linkCategories: category
              }
            };
          } else {
            conditions = {
              "$and": [
                {
                  "_id": userId
                }, {
                  "linkCategories._id": categoryData.index
                }
              ]
            };
            update = {
              $set: {
                "linkCategories.$.name": categoryData.name
              }
            };
          }
          return _this.getMongooseModel().update(conditions, update, options, function(err, affected) {
            if (!err) {
              return onComplete(err, affected);
            } else {
              return onComplete(true, new ExceptionUserMessage("error", "Category " + categoryData.name + " already exist"));
            }
          });
        } else {
          return onComplete(true, new ExceptionUserMessage("error", "Category " + categoryData.name + " already exist"));
        }
      };
    })(this));
  };

  User.prototype.deleteCategory = function(inUserId, inCategoryData, onComplete) {
    var conditions, update;
    conditions = {
      "$and": [
        {
          "_id": inUserId
        }, {
          "linkCategories._id": inCategoryData.index
        }
      ]
    };
    update = {
      $pull: {
        linkCategories: {
          _id: inCategoryData.index
        }
      }
    };
    return this.getMongooseModel().update(conditions, update, (function(_this) {
      return function(err, numberAffected) {
        return _this.getCategoriesByUserId(inUserId, onComplete);
      };
    })(this));
  };

  User.prototype.isCategoryExist = function(inUserId, inCategoryName, onComplete) {
    var conditions;
    conditions = {
      "$and": [
        {
          "_id": inUserId
        }, {
          'linkCategories.name': inCategoryName
        }
      ]
    };
    return this.getMongooseModel().findOne(conditions, "linkCategories").exec(function(err, result) {
      var isExist;
      isExist = result !== null;
      return onComplete(err, isExist);
    });
  };

  User.prototype.getCategoriesByUserId = function(inUserId, onComplete) {
    return this.getMongooseModel().findOne({
      '_id': inUserId
    }, "linkCategories").exec(function(err, result) {
      return onComplete(err, result.linkCategories);
    });
  };

  User.prototype.getCategoryByUserIdAndCatName = function(inUserId, inCategoryName, onComplete) {
    var conditions;
    conditions = {
      "$and": [
        {
          "_id": inUserId
        }, {
          'linkCategories.name': inCategoryName
        }
      ]
    };
    return this.getMongooseModel().findOne(conditions, "linkCategories").exec(function(err, result) {
      var cat, _i, _len, _ref, _results;
      _ref = result.linkCategories;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cat = _ref[_i];
        if (cat.name === inCategoryName) {
          onComplete(err, cat);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  User.prototype.saveLanguage = function(inUserId, inLangId, onComplete) {
    var conditions, options, update;
    conditions = {
      "_id": inUserId
    };
    update = {
      $set: {
        "languageId": inLangId
      }
    };
    options = {};
    return this.getMongooseModel().update(conditions, update, options, function(err, affected) {
      if (!err) {
        return onComplete(err, affected);
      } else {
        return onComplete(true, new ExceptionUserMessage("error", "Unable to save language id"));
      }
    });
  };

  User.prototype._saveUser = function(inUserData, onComplete) {
    var crypto, doc;
    inUserData['linkCategories'] = [
      {
        name: 'Default'
      }
    ];
    crypto = require('crypto');
    inUserData.password = crypto.createHash('md5').update(inUserData.password).digest("hex");
    doc = this.createMongooseDocument(inUserData);
    return doc.save(function(err) {
      var exception;
      exception = null;
      if (err) {
        exception = new ExceptionUserMessage("error", "unable to save");
      }
      return onComplete(err, exception);
    });
  };

  return User;

})(Model.Mongo);

exports.User = User;
