// Generated by CoffeeScript 1.7.1
var UserController,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

UserController = (function(_super) {
  __extends(UserController, _super);

  function UserController() {
    this.facebookCallback = __bind(this.facebookCallback, this);
    this.logout = __bind(this.logout, this);
    this.login = __bind(this.login, this);
    return UserController.__super__.constructor.apply(this, arguments);
  }

  UserController.prototype.login = function(req, res, next) {
    var app;
    app = this.get('app');
    return app.get('passport').authenticate("local", function(err, isAuthenticated, info) {
      console.log(isAuthenticated, info);
      if (isAuthenticated) {
        req.session.user = info;
        Helper.json.setIsUserAuthed(true);
        Helper.json.addMessage("success", "Logged in");
      } else {
        Helper.json.setSuccess(false);
        Helper.json.setIsUserAuthed(false);
        Helper.json.addMessage("error", info);
      }
      return res.json(Helper.json.render());
    })(req, res, next);
  };

  UserController.prototype.logout = function(req, res, next) {
    delete req.session.user;
    Helper.json.setSuccess(true);
    Helper.json.setIsUserAuthed(false);
    return res.json(Helper.json.render());
  };

  UserController.prototype.register = function(req, res) {
    return Model.instanceOf('user').save(req.body, function(isError, exception) {
      var response;
      console.log(isError, exception, exception != null ? exception.toJson() : void 0);
      if (isError) {
        Helper.json.setSuccess(false);
        Helper.json.addMessage(exception.toJson());
      } else {
        Helper.json.addMessage("success", "You have been registered");
      }
      response = Helper.json.render();
      return res.json(response);
    });
  };

  UserController.prototype.saveCategory = function(req, res) {
    var loggedUserId;
    loggedUserId = req.session.user._id;
    return Model.instanceOf('user').saveCategory(loggedUserId, req.body, function(err, exception) {
      if (!err) {
        return Model.instanceOf('user').getById(loggedUserId, function(err, result) {
          var jsonResponse;
          if (!err) {
            Helper.json.addData('categories', result.linkCategories);
            Helper.json.addMessage("success", "Saved!");
          } else {
            Helper.json.setSuccess(false);
            Helper.json.addMessage("error", "Unable to get user");
          }
          jsonResponse = Helper.json.render();
          console.log(jsonResponse);
          return res.json(jsonResponse);
        });
      } else {
        Helper.json.setSuccess(false);
        Helper.json.addMessage(exception.toJson());
        return res.json(Helper.json.render());
      }
    });
  };

  UserController.prototype.deleteCategory = function(req, res) {
    var categoryData, loggedUserId;
    loggedUserId = req.session.user._id;
    categoryData = req.body;
    return Model.instanceOf('link').countByCategoryId(loggedUserId, categoryData.index, function(err, cnt) {
      if (!err) {
        if (parseInt(cnt) === 0) {
          return Model.instanceOf('user').deleteCategory(loggedUserId, categoryData, function(err, result) {
            console.log('err is null', err === null, err, result);
            if (err === null) {
              Helper.json.addData('categories', result);
              Helper.json.addMessage("success", "Deleted!");
            } else {
              Helper.json.setSuccess(false);
              Helper.json.addMessage("error", "Unable to delete category");
            }
            return res.json(Helper.json.render());
          });
        } else {
          Helper.json.setSuccess(false).addMessage("error", "Unable to delete this categoty because there are links which are reffered to it");
          return res.json(Helper.json.render());
        }
      } else {
        Helper.json.setSuccess(false).addMessage("error", "Unexpected error [45]");
        return res.json(Helper.json.render());
      }
    });
  };

  UserController.prototype.getLogged = function(req, res) {
    var user;
    if (req.session.user) {
      return Model.instanceOf('user').getById(req.session.user._id, function(err, result) {
        var user;
        if (!err) {
          user = result;
        } else {
          user = null;
        }
        Helper.json.addData('user', user);
        return res.json(Helper.json.render());
      });
    } else {
      user = null;
      Helper.json.addData('user', user);
      return res.json(Helper.json.render());
    }
  };

  UserController.prototype.facebookCallback = function(req, res, next) {
    var app;
    app = this.get('app');
    return app.get('passport').authenticate('facebook', function(err, user) {
      var userDataToBeSaved;
      console.log(user._json.first_name, user._json.last_name, user._json.email);
      userDataToBeSaved = {
        firstName: user._json.first_name,
        lastName: user._json.last_name,
        email: user._json.email,
        password: '',
        provider: 'facebook',
        socialData: user._json
      };
      return Model.instanceOf('user').findByEmailOrCreate(userDataToBeSaved, function(isError, info) {
        var isAuthed;
        isAuthed = false;
        if (isError) {
          Helper.json.setSuccess(false);
          Helper.json.setIsUserAuthed(false);
          Helper.json.addMessage(info.toJson());
        } else {
          Helper.json.setIsUserAuthed(true);
          Helper.json.addMessage("success", "You have been logged in");
          Helper.json.addData('info', info);
          req.session.user = info;
          isAuthed = true;
        }
        return res.render('user/facebook-callback', {
          isAuthed: isAuthed
        });
      });
    })(req, res, next);
  };

  UserController.prototype.changeLanguage = function(req, res, next) {
    return Model.instanceOf('user').saveLanguage(req.session.user._id, req.body.langId, function(err, details) {
      if (!err) {

      } else {
        Helper.json.setSuccess(false);
        Helper.json.addMessage(details.toJson());
      }
      return res.json(Helper.json.render());
    });
  };

  return UserController;

})(CoreController);

exports.userController = new UserController;

exports.list = function(req, res) {
  return res.send("respond with a resource");
};

exports.register = function(req, res) {
  return Model.instanceOf('user').save(req.body, function(isError, exception) {
    var response;
    console.log(isError, exception, exception != null ? exception.toJson() : void 0);
    if (isError) {
      Helper.json.setSuccess(false);
      Helper.json.addMessage(exception.toJson());
    } else {
      Helper.json.addMessage("success", "You have been registered");
    }
    response = Helper.json.render();
    return res.json(response);
  });
};

exports.login = function(req, res) {
  var email, password;
  email = req.param('email');
  password = req.param('password');
  return Model.instanceOf('user').login(email, password, function(user) {
    console.log('user', user);
    if (user) {
      req.session.user = user;
      Helper.json.addMessage("success", "Logged in");
    } else {
      Helper.json.setSuccess(false);
      Helper.json.addMessage('error', 'Incorrect login or password');
    }
    return res.json(Helper.json.render());
  });
};

exports.saveCategory = function(req, res) {
  var loggedUserId;
  loggedUserId = req.session.user._id;
  return Model.instanceOf('user').saveCategory(loggedUserId, req.body, function(err, objectsAffected) {
    if (!err) {
      return Model.instanceOf('user').getById(loggedUserId, function(err, result) {
        var jsonResponse;
        if (!err) {
          Helper.json.addData('categories', result.linkCategories);
          Helper.json.addMessage("success", "Saved!");
        } else {
          Helper.json.setSuccess(false);
          Helper.json.addMessage("error", "Unable to get user");
        }
        jsonResponse = Helper.json.render();
        console.log(jsonResponse);
        return res.json(jsonResponse);
      });
    } else {
      Helper.json.setSuccess(false);
      Helper.json.addMessage("error", "Unable to save category");
      return res.json(Helper.json.render());
    }
  });
};

exports.deleteCategory = function(req, res) {
  var loggedUserId;
  loggedUserId = req.session.user._id;
  return Model.instanceOf('user').deleteCategory(loggedUserId, req.body, function(err, result) {
    console.log(err, result);
    if (!err) {
      Helper.json.addData('categories', result);
      Helper.json.addMessage("success", "Deleted!");
    } else {
      Helper.json.setSuccess(false);
      Helper.json.addMessage("error", "Unable to delete category");
    }
    return res.json(Helper.json.render());
  });
};

exports.getLogged = function(req, res) {
  var user;
  if (req.session.user) {
    return Model.instanceOf('user').getById(req.session.user._id, function(err, result) {
      var user;
      if (!err) {
        user = result;
      } else {
        user = null;
      }
      Helper.json.addData('user', user);
      return res.json(Helper.json.render());
    });
  } else {
    user = null;
    Helper.json.addData('user', user);
    return res.json(Helper.json.render());
  }
};
