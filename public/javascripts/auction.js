// Generated by CoffeeScript 1.7.1
var Auction;

Auction = (function() {
  function Auction() {
    this.init();
  }

  Auction.prototype.init = function() {
    this._socket = io.connect('http://localhost:3000');
    this._findElements();
    this._attachEvents();
    this._attachListeners();
    this._timeCountDown();
    return setInterval((function(_this) {
      return function() {
        return _this._timeCountDown();
      };
    })(this), 1000);
  };

  Auction.prototype._findElements = function() {
    this._$doBidBtn = $('.js-do-bid-btn');
    return this._$timeLabels = $('.js-time-label');
  };

  Auction.prototype._attachEvents = function() {
    return this._attachDoBidBtnClick();
  };

  Auction.prototype._attachListeners = function() {
    return this._attachAuctionUpdatedListener();
  };

  Auction.prototype._attachAuctionUpdatedListener = function() {
    return this._socket.on('auction_updated', (function(_this) {
      return function(data) {
        var $auctionHolder, startingPriceParts;
        console.log(data);
        $auctionHolder = $(".js-live-auction[data-auction-id=" + data.auction._id + "]");
        startingPriceParts = String(data.auction.currentPrice).split('.');
        $auctionHolder.find('.price-label .price .js-int').text(startingPriceParts[0]);
        $auctionHolder.find('.price-label .price sup').text(startingPriceParts[1].substr(0, 2));
        return $auctionHolder.find('.js-winner').text(data.auction.lastBidder);
      };
    })(this));
  };

  Auction.prototype._attachDoBidBtnClick = function() {
    this._$doBidBtn.unbind('click');
    return this._$doBidBtn.click((function(_this) {
      return function(event) {
        var auctionData;
        auctionData = {
          id: $(event.currentTarget).closest('.js-product-holder').attr('data-auction-id')
        };
        return _this._socket.emit('do_bid', auctionData);
      };
    })(this));
  };

  Auction.prototype._timeCountDown = function() {
    return this._$timeLabels.each((function(_this) {
      return function(idx, el) {
        var $timeLabel, secsLeft;
        $timeLabel = $(el);
        secsLeft = $timeLabel.attr('data-secs-left');
        secsLeft -= 1;
        $timeLabel.find('span').text(_this._secondsToInterval(secsLeft));
        return $timeLabel.attr('data-secs-left', secsLeft);
      };
    })(this));
  };

  Auction.prototype._secondsToInterval = function(inSeconds) {
    var days, hours, minutes, seconds, timeLeft;
    seconds = Math.floor(inSeconds);
    days = Math.floor(seconds / 86400);
    seconds -= days * 86400;
    hours = Math.floor(seconds / 3600);
    seconds -= hours * 3600;
    minutes = Math.floor(seconds / 60);
    seconds -= minutes * 60;
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    timeLeft = hours + ':' + minutes + ':' + seconds;
    if (days > 0) {
      timeLeft = ("" + days + "d ") + timeLeft;
    }
    return timeLeft;
  };

  return Auction;

})();
