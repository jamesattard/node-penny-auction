// Generated by CoffeeScript 1.7.1

/*
403 (Forbidden) Handler

Usage:
return res.forbidden();
return res.forbidden(err);
return res.forbidden(err, view);
return res.forbidden(err, redirectTo);

e.g.:
```
return res.forbidden('Access denied.');
```
 */
var forbidden;

module.exports = forbidden = function(err, viewOrRedirect) {
  var locals, readabilify, req, res, sendJSON, viewReady;
  sendJSON = function(data) {
    if (!data) {
      return res.send();
    } else {
      if (typeof data !== "object" || data instanceof Error) {
        data = {
          error: data
        };
      }
      if (req.options.jsonp && !req.isSocket) {
        return res.jsonp(data);
      } else {
        return res.json(data);
      }
    }
  };
  req = this.req;
  res = this.res;
  res.status(403);
  this.req._sails.log.verbose("Sent 403 (\"Forbidden\") response");
  if (err) {
    this.req._sails.log.verbose(err);
  }
  if (req.wantsJSON) {
    return sendJSON(err);
  }
  locals = void 0;
  if (!err) {
    locals = {};
  } else if (typeof err !== "object") {
    locals = {
      error: err
    };
  } else {
    readabilify = function(value) {
      if (sails.util.isArray(value)) {
        return sails.util.map(value, readabilify);
      } else if (sails.util.isPlainObject(value)) {
        return sails.util.inspect(value);
      } else {
        return value;
      }
    };
    locals = {
      error: readabilify(err)
    };
  }
  if (typeof viewOrRedirect === "string") {
    if (viewOrRedirect.match(/^(\/|http:\/\/|https:\/\/)/)) {
      return res.redirect(viewOrRedirect);
    } else {
      return res.view(viewOrRedirect, locals, viewReady = function(viewErr, html) {
        if (viewErr) {
          return sendJSON(err);
        } else {
          return res.send(html);
        }
      });
    }
  } else {
    return res.view("403", locals, viewReady = function(viewErr, html) {
      if (viewErr) {
        return sendJSON(err);
      } else {
        return res.send(html);
      }
    });
  }
};
