// Generated by CoffeeScript 1.7.1
var ErrorResponse, _;

_ = require("underscore");

ErrorResponse = (function() {
  function ErrorResponse(inErrors) {
    this._errors = this._prepareErrorsForSending(inErrors);
  }

  ErrorResponse.prototype.toJSON = function() {
    return {
      errors: this._errors
    };
  };


  /*
    Takes error(s) and return array of objects with following format:
    {
    errorType: 'string|validation|exception',
    message: 'some error description',
    field: '<name of the field that causes error (FOR errorType=validation ONLY)>'
    }
   */

  ErrorResponse.prototype._prepareErrorsForSending = function(inErrors) {
    var error, errors, _i, _len;
    errors = [];
    if (_.isArray(inErrors)) {
      for (_i = 0, _len = inErrors.length; _i < _len; _i++) {
        error = inErrors[_i];
        errors = this._smartPush(this._normalizeError(error), errors);
      }
    } else {
      errors = this._smartPush(this._normalizeError(inErrors), errors);
    }
    return errors;
  };

  ErrorResponse.prototype._normalizeError = function(inError) {
    var errorNormalized;
    if (typeof inError === 'string') {
      errorNormalized = {
        errorType: 'string',
        message: sails.__(inError)
      };
    } else if (inError instanceof Error) {
      errorNormalized = {
        errorType: 'exception',
        messages: inError.message
      };
    } else if ((_.isObject(inError)) && (_.isFunction(inError.toJSON))) {
      errorNormalized = inError.toJSON();
    }
    return errorNormalized;
  };

  ErrorResponse.prototype._smartPush = function(inSrc, ioDest) {
    if (_.isArray(inSrc)) {
      ioDest = ioDest.concat(inSrc);
    } else if (_.isObject(inSrc)) {
      ioDest.push(inSrc);
    }
    return ioDest;
  };

  return ErrorResponse;

})();

GLOBAL.ErrorResponse = ErrorResponse;
