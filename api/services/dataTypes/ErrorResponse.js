// Generated by CoffeeScript 1.7.1

/*
  The ErrorResponse class is designed to construct error response

  It can handle following data passed to its constructor:(as single object or array of these objects)
    * String - will be serialized to hash like that has following format
      {
        errorType: 'string',
        message: "....."
      }
    * Error or class derived from Error (std javascript exception error)- will be serialized to hash like that has following format
      {
        errorType: 'exception',
        message: "....."
      }
    * Instance of any class derived from SerializableError class (toJSON() will be called to get error's data for response)
      all childs of SerializableError class implements toJSON() function that will be used to serialize array

  @example
    new ErrorResponse "User not found"
    new ErrorResponse new Error "User not found"
    new ErrorResponse new ValidationError "email", "Please enter email"

    new ErrorResponse ["User not found", new Error("User not found"), new ValidationError("email", "Please enter email"), ]
 */
var ErrorResponse, _;

_ = require("underscore");

ErrorResponse = (function() {
  function ErrorResponse(inErrors) {
    this._errors = this._prepareErrorsForSending(inErrors);
  }

  ErrorResponse.prototype.toJSON = function() {
    return {
      errors: this._errors
    };
  };


  /*
    Takes error(s) and return array of objects with following format:
    {
    errorType: 'string|validation|exception',
    message: 'some error description',
    field: '<name of the field that causes error (FOR errorType=validation ONLY)>'
    }
   */

  ErrorResponse.prototype._prepareErrorsForSending = function(inErrors) {
    var error, errorJson, errors, _i, _len;
    errors = [];
    if (_.isArray(inErrors)) {
      for (_i = 0, _len = inErrors.length; _i < _len; _i++) {
        error = inErrors[_i];
        errorJson = this._normalizeError(error);
        if (errorJson) {
          errors = this._smartPush(errorJson, errors);
        }
      }
    } else {
      errorJson = this._normalizeError(inErrors);
      if (errorJson) {
        errors = this._smartPush(errorJson, errors);
      }
    }
    return errors;
  };

  ErrorResponse.prototype._normalizeError = function(inError) {
    var errorNormalized;
    if (typeof inError === 'string') {
      errorNormalized = {
        errorType: 'string',
        message: sails.__(inError)
      };
    } else if (inError instanceof Error) {
      if (sails.config.environment !== 'production') {
        errorNormalized = {
          errorType: 'exception',
          message: inError.message
        };
      } else {
        errorNormalized = false;
      }
    } else if (inError instanceof SerializableError) {
      errorNormalized = inError.toJSON();
    }
    return errorNormalized;
  };


  /*
    pushes inSrc to ioDest if inSrc is flat object
    merges inSrc into ioDest if inSrc is array
  
    @returns ioDest with added/merged inSrc
   */

  ErrorResponse.prototype._smartPush = function(inSrc, ioDest) {
    if (_.isArray(inSrc)) {
      ioDest = ioDest.concat(inSrc);
    } else if (_.isObject(inSrc)) {
      ioDest.push(inSrc);
    }
    return ioDest;
  };

  return ErrorResponse;

})();

GLOBAL.ErrorResponse = ErrorResponse;
